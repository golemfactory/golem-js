name: Goth nightly

on:
  schedule:
    # run this workflow every day at 2:00 AM UTC
    - cron: "0 2 * * *"

jobs:
  #  prepare-matrix:
  #    name: Prepare matrix JSON
  #    runs-on: ubuntu-latest
  #    outputs:
  #      matrix-json: ${{ steps.get-matrix.outputs.matrix }}
  #    steps:
  #      - name: Checkout
  #        uses: actions/checkout@v2
  #        with:
  #          fetch-depth: 0
  #
  #      # finds branches with names matching the release branch convention (e.g. release/v0.7) and returns one with highest version
  #      - name: Get latest stable branch
  #        id: latest-stable
  #        # second sed expression removes leading whitespaces and '*' characters (git uses it to indicate the current branch)
  #        run: |
  #          branch=$(git branch -a | sed -e 's:remotes/origin/::' -e 's:^[ \t*]*::' | grep -E '^b[0-9]+(\.[0-9]+)+$' | sort -Vr | head -1)
  #          echo "::set-output name=branch::$branch"
  #
  #      # prepares JSON object representing strategy matrix which contains two 'branch' variants: master and latest stable
  #      - name: Get matrix JSON
  #        id: get-matrix
  #        run: echo "::set-output name=matrix::{\"include\":[{\"branch\":\"master\"},{\"branch\":\"${{ steps.latest-stable.outputs.branch }}\"}]}"

  prepare-matrix-master-only:
    name: Prepare matrix JSON
    runs-on: ubuntu-latest
    outputs:
      matrix-json: ${{ steps.get-matrix.outputs.matrix }}
    steps:
      # prepares JSON object representing strategy matrix with only the master branch
      - name: Get matrix JSON
        id: get-matrix
        run: echo "::set-output name=matrix::{\"include\":[{\"branch\":\"master\"}]}"

  goth-tests:
    runs-on: goth
    needs: prepare-matrix-master-only
    strategy:
      matrix: ${{ fromJson(needs.prepare-matrix-master-only.outputs.matrix-json) }}
      fail-fast: false
    name: Run integration tests (nightly) on ${{ matrix.branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.19.0"

      - name: Build golem-js
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential
          npm install
          npm run build

      - name: Configure python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install goth
        run: |
          pip install goth
          rm -rf ../goth/assets
          python -m goth create-assets ../goth/assets
          sed -Ezi 's/(use\-proxy:\s)(True)/\1False/mg' ../goth/assets/goth-config.yml

      - name: Install websocat and sshpass
        run: |
          sudo wget https://github.com/vi/websocat/releases/download/v1.9.0/websocat_linux64 -O /usr/local/bin/websocat
          sudo chmod +x /usr/local/bin/websocat
          sudo apt-get install sshpass

      - name: Disconnect Docker containers from default network
        continue-on-error: true
        # related to this issue: https://github.com/moby/moby/issues/23302
        run: |
          docker network inspect docker_default
          sudo apt-get install -y jq
          docker network inspect docker_default | jq ".[0].Containers | map(.Name)[]" | tee /dev/stderr | xargs --max-args 1 -- docker network disconnect -f docker_default

      - name: Remove Docker containers
        continue-on-error: true
        run: docker rm -f $(docker ps -a -q)

      - name: Restart Docker daemon
        # related to this issue: https://github.com/moby/moby/issues/23302
        run: sudo systemctl restart docker

      - name: Log in to GitHub Docker repository
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u ${{github.actor}} --password-stdin

      - name: Run test suite
        env:
          GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run test:integration

      - name: Upload test logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: goth-logs
          path: /tmp/goth-tests

      # Only relevant for self-hosted runners
      - name: Remove test logs
        if: always()
        run: rm -rf /tmp/goth-tests
