name: Nightly Examples Tests

on:
  schedule:
    - cron: "30 1 * * *"
  workflow_dispatch:
    inputs:
      provider_version:
        description: "Provider version (e.g., v0.12.3 or pre-rel-v0.13.1)"
        required: false
        default: "v0.12.3"
      requestor_version:
        description: "Requestor version (e.g., v0.12.3 or pre-rel-v0.13.1)"
        required: false
        default: "v0.12.3"
      provider_wasi_version:
        description: "Provider WASI version (e.g., v0.2.2)"
        required: false
        default: "v0.2.2"
      provider_vm_version:
        description: "Provider VM version (e.g., v0.3.0)"
        required: false
        default: "v0.3.0"

jobs:
  prepare-matrix-master-only:
    name: Prepare matrix JSON
    runs-on: ubuntu-latest
    outputs:
      matrix-json: ${{ steps.get-matrix.outputs.matrix }}
    steps:
      # prepares JSON object representing strategy matrix with only the master branch
      - name: Get matrix JSON
        id: get-matrix
        run: echo "::set-output name=matrix::{\"include\":[{\"branch\":\"master\"}]}"
  goth-tests:
    runs-on: goth2
    needs: prepare-matrix-master-only
    env:
      PROVIDER_VERSION: ${{ github.event.inputs.provider_version || 'v0.12.3' }}
      REQUESTOR_VERSION: ${{ github.event.inputs.requestor_version || 'v0.12.3' }}
      PROVIDER_WASI_VERSION: ${{ github.event.inputs.provider_wasi_version || 'v0.2.2' }}
      PROVIDER_VM_VERSION: ${{ github.event.inputs.provider_vm_version || 'v0.3.0' }}
    strategy:
      matrix: ${{ fromJson(needs.prepare-matrix-master-only.outputs.matrix-json) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use random string for subnet
        run: echo "YAGNA_SUBNET=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 8 ; echo '')" >> $GITHUB_ENV

      - name: Set up Versions
        run: |
          echo "PROVIDER_VERSION=${PROVIDER_VERSION}" >> $GITHUB_ENV
          echo "REQUESTOR_VERSION=${REQUESTOR_VERSION}" >> $GITHUB_ENV
          echo "PROVIDER_WASI_VERSION=${PROVIDER_WASI_VERSION}" >> $GITHUB_ENV
          echo "PROVIDER_VM_VERSION=${PROVIDER_VM_VERSION}" >> $GITHUB_ENV

      - name: Build the docker containers
        run: |
          docker compose -f tests/docker/docker-compose.yml build \
            --build-arg UBUNTU_VERSION=22.04 \
            --build-arg YA_CORE_PROVIDER_VERSION=${PROVIDER_VERSION} \
            --build-arg YA_CORE_REQUESTOR_VERSION=${REQUESTOR_VERSION} \
            --build-arg YA_WASI_VERSION=${PROVIDER_WASI_VERSION} \
            --build-arg YA_VM_VERSION=${PROVIDER_VM_VERSION}

      - name: Start the docker containers
        run: sudo service docker restart && docker compose -f tests/docker/docker-compose.yml down && docker compose -f tests/docker/docker-compose.yml up -d

      - name: Fund the requestor
        run: sleep 10 && docker exec -t docker-requestor-1 /bin/sh -c "/golem-js/tests/docker/fundRequestor.sh"

      - name: Install and build the SDK in the docker container
        run: docker exec -t docker-requestor-1 /bin/sh -c "cd /golem-js && npm i && npm run build"

      - name: Run the Examples tests
        run: docker exec -t docker-requestor-1 /bin/sh -c "cd /golem-js && npm install --prefix examples && npm install ts-node && npm run test:examples -- --exitOnError"

      - name: Cleanup Docker
        if: always()
        run: docker ps -q | xargs -r docker kill && docker system prune -af
